package galileo.util;

import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;

// Porting
// Author: Saptashwa Mitra
// Date:   Mar 23, 2018
// Class:  CS163
// Email:  eid@cs.colostate.edu

/**
 * @author Saptashwa
 *
 */
public class MyPorter {

	List<double[][]> weight_matrices;
	List<double[]> bias_matrices;
	
	double[] means = new double[3];
	double[] sigmas = new double[3];
	
	
	
	public static void main(String[] args) {
		
		//String conf = "{\"total_layers\":2,\"layer_shapes\":[\"(3, 2)\",\"(2, 1)\"],\"indv_layers\":[\"[[-1.00456745e+00 -3.46978328e-01] [-5.65508870e-01 -1.64969949e-01] [-1.11628716e-04 -5.23894543e-01]]\",\"[[-0.39979925] [-0.35616258]]\"],\"bias_shapes\":[2,1],\"bias_layers\":[\"[-0.97296882 -0.70836777]\",\"[0.1704212]\"]}";
		
		String conf = "{\"total_layers\":2,\"stds\":[6.053180333013331,13.057794978662725,25139340.197546124],\"means\":[37.880849629703356,-93.05308011409079,1420201161821.0076],\"layer_shapes\":[\"(3, 100)\",\"(100, 1)\"],\"indv_layers\":[\"[[-2.60554648e-01  8.59220744e-02 -7.27332917e-02 -1.46582104e-02    1.37460769e-01 -1.52888311e-01  2.35708526e-01 -2.03186799e-04    1.99058142e-01 -2.78502861e-01 -1.28848400e-01  1.28418828e-01    2.06313901e-01 -3.21481556e-01  5.60967216e-02  5.32881582e-02   -6.57224353e-02  9.25245594e-02 -1.75501439e-01 -2.98705054e-02   -1.46941274e-01  2.35899970e-01  6.41924177e-02  1.28553772e-01   -8.98929936e-02 -1.53414222e-01 -4.40563168e-02 -2.42862084e-01    2.95443670e-01  4.34923201e-01 -1.74731272e-01  1.57772828e-01   -3.95549609e-02  1.90769612e-01 -2.38269794e-01 -2.80806182e-01    4.60283468e-02 -1.01771315e-01 -6.68484838e-02  9.28175707e-02   -1.54787468e-01  1.30707937e-01  2.81572841e-01  4.16278069e-02   -1.65237490e-01 -1.80262221e-02 -7.90039218e-02 -2.14470568e-01    9.15947794e-02  4.99267445e-02  1.45501516e-01 -8.00868718e-02    5.54514741e-02  8.50261004e-02 -3.03584240e-03  1.59141039e-01   -1.59607119e-01 -2.54305118e-01 -2.20570599e-01  2.08963474e-01    1.97983428e-01 -1.44304449e-01  2.92378672e-02  2.24068519e-04   -1.93643289e-01 -1.08872861e-01 -2.03861496e-01 -2.09627634e-01    2.51662818e-02 -1.44212070e-01  1.80295097e-01 -1.00953014e-01   -1.26086349e-01  3.14086805e-02  1.70694818e-01  2.50878620e-01    1.39994589e-01  1.78413610e-01 -1.68869322e-01 -1.43490966e-01   -3.06079549e-01  1.36191892e-01  7.92373241e-04  2.55354109e-01   -1.74085975e-01  1.15050648e-01  2.34427009e-01 -1.23398096e-01    1.91814829e-01 -2.44253009e-01 -2.20514952e-01 -1.51787614e-01   -2.00611870e-01  1.23528240e-01 -1.70424012e-01  1.65839781e-02   -1.20876915e-01 -1.65358601e-01  2.55670418e-01  2.40602889e-02]  [-2.48688160e-01 -1.27990619e-01  2.12738305e-01 -1.81910348e-01    2.75101294e-01 -9.94131585e-03 -1.65814980e-01  1.08863400e-01    8.16380162e-02 -2.16579001e-01  7.94993012e-02 -1.16018503e-01    1.45213774e-01  1.13801359e-01 -1.04976674e-01  4.61515041e-01   -2.21374505e-01 -2.21927556e-02  2.56845136e-01  1.22153000e-01   -2.12580552e-02  1.26920975e-01 -2.24971853e-01  8.47484046e-02    1.11375098e-02  1.71180572e-01 -7.01195268e-02 -4.11496987e-02   -1.70312311e-01  1.53242650e-01 -2.20981269e-01 -2.52373753e-01    7.05688329e-02  9.05103765e-02 -9.91016143e-02  1.55968067e-01   -1.82207208e-01  7.72696129e-02  1.38080267e-01 -1.27325589e-01    6.24297113e-02 -1.34845189e-01  2.29796940e-01 -1.70840809e-01    1.79288683e-01 -1.81762909e-01 -8.56972279e-03 -2.08025394e-01   -1.73952134e-01 -1.08573291e-01 -1.16180298e-01  2.15726216e-01   -8.26550322e-02 -1.81408845e-01 -9.94996576e-03  1.76920582e-01    2.18176616e-01  2.64184885e-01 -2.08150207e-01 -9.21574066e-02    1.54916346e-01 -3.06386130e-01 -2.10848964e-01 -7.10492607e-04    1.52597852e-01  7.66684487e-02 -1.09402827e-01  2.00401612e-02   -2.09599039e-01  2.71479446e-01  2.45032776e-01 -7.90387825e-02    2.60103014e-01  2.52131142e-01  1.19292401e-01 -1.96822964e-02    1.96680445e-01  1.32857366e-01 -2.25132084e-02  5.20965261e-02   -1.15760948e-01 -8.53078403e-02  7.96445854e-03  1.47959856e-01    2.25421141e-01 -3.34089002e-02 -1.72157140e-01 -5.76943021e-02   -1.99329915e-01 -2.23829527e-01  2.32549265e-01 -8.77089769e-02   -2.32422902e-01 -2.36140746e-01  4.06977694e-02  9.03029548e-02    4.95481736e-02 -2.88951960e-01  1.46331024e-01 -7.31555383e-03]  [ 1.24754076e-01 -1.47315694e-01 -2.78976548e-01  1.44889911e-01   -1.54037142e-02  3.62885204e-02 -2.55344389e-01 -1.18081761e-01   -1.31840097e-01 -2.27579973e-01 -1.93407567e-01 -1.94171736e-01   -1.06662296e-01 -2.07380881e-02 -3.49147407e-01  4.12010242e-02   -2.91427728e-01 -2.34719668e-01  2.15886115e-01 -8.64928865e-02   -1.79970322e-01 -1.39040803e-01 -2.13530945e-01 -9.98633759e-02    1.49399138e-01 -2.10448462e-01 -2.73673949e-01 -1.55117680e-01    5.30152230e-02  2.33363710e-01 -1.06656806e-01  5.46826713e-02    1.65220135e-03  8.37299822e-02 -7.77167908e-02  2.02497256e-01    8.96681444e-03 -1.69310675e-01 -8.78030820e-02  2.72444127e-02    5.67929691e-02 -1.97760266e-01 -6.52329537e-02 -1.15706608e-01    2.07613843e-01  2.40570225e-01  4.74045028e-02  1.58700167e-01    2.96941376e-02 -9.25731205e-02 -2.79757612e-01  2.49700065e-01    4.40028057e-02 -5.41986184e-02  4.60556461e-04  1.88833141e-01   -2.63832902e-01  1.36163586e-01  2.87514732e-01  2.11798799e-01    1.18384327e-01 -2.30564355e-01 -1.04284690e-01 -4.59221361e-01   -1.89492980e-01 -2.60706291e-01  1.21687985e-01 -1.54002654e-01   -3.28534580e-01  2.21333677e-01 -2.72768168e-01  2.83944647e-02    2.13410925e-01 -2.95844625e-01 -4.39724105e-02 -1.60211145e-01    2.37523284e-01 -8.16012326e-02 -3.41468204e-02 -2.70353233e-01    2.59714883e-02  1.66247679e-01 -4.72785141e-02  2.12603514e-01    1.61736737e-01 -6.60625602e-02  2.97027000e-01 -5.22774085e-03    1.40429305e-01 -2.15822319e-01  1.06034330e-01 -1.95836401e-01    1.59091941e-01  3.15269166e-01 -2.35217685e-01 -5.31300935e-01   -1.24431213e-01 -9.01085706e-02  1.12456159e-01 -6.56789190e-02]]\",\"[[-0.27923139]  [ 0.38522734]  [ 0.17892081]  [-0.22720747]  [-0.45231261]  [ 0.0416924 ]  [ 0.23947462]  [ 0.1568003 ]  [-0.15259106]  [ 0.02971876]  [ 0.19401626]  [-0.10514379]  [ 0.31233826]  [ 0.13668696]  [ 0.26769736]  [-0.22187508]  [ 0.30950646]  [-0.2451634 ]  [ 0.11643147]  [-0.02565766]  [-0.0353729 ]  [ 0.12205122]  [-0.2313839 ]  [ 0.36381248]  [ 0.11380636]  [ 0.19753373]  [ 0.27739288]  [ 0.16465416]  [ 0.08119138]  [-0.37164428]  [ 0.34521046]  [-0.26378131]  [ 0.27859575]  [ 0.27607795]  [ 0.16092119]  [ 0.13331418]  [-0.17419555]  [-0.12488571]  [-0.1969552 ]  [ 0.10774177]  [ 0.36673346]  [ 0.32892463]  [-0.27756325]  [ 0.21264701]  [ 0.14223396]  [ 0.0426572 ]  [ 0.27926847]  [-0.17860066]  [-0.09250021]  [-0.0227983 ]  [-0.39775279]  [ 0.18984514]  [ 0.20338744]  [-0.17006604]  [-0.01342372]  [ 0.20144225]  [-0.20423108]  [-0.421651  ]  [ 0.25662569]  [ 0.24259709]  [ 0.16216489]  [-0.30890994]  [ 0.28324351]  [-0.35139215]  [ 0.15595728]  [ 0.15650083]  [ 0.15904082]  [-0.20025917]  [-0.3902344 ]  [ 0.10336938]  [ 0.33240645]  [-0.05672815]  [ 0.25463104]  [ 0.21668456]  [ 0.13076437]  [ 0.12900661]  [ 0.07730573]  [ 0.31316626]  [-0.16806487]  [ 0.24097183]  [-0.16317769]  [-0.15054468]  [-0.01700404]  [ 0.11068772]  [ 0.20769817]  [ 0.0900773 ]  [ 0.21823915]  [ 0.08335376]  [-0.1481855 ]  [ 0.28522821]  [-0.08867476]  [-0.12480301]  [ 0.28909855]  [ 0.23064215]  [ 0.17427902]  [-0.71716024]  [-0.13160388]  [ 0.12225976]  [ 0.1713802 ]  [ 0.04452128]]\"],\"bias_shapes\":[100,1],\"bias_layers\":[\"[-1.66488912e-01  3.81833567e-01  2.72179495e-02 -2.17347147e-01  -1.58414261e-01  1.50110259e-01  6.11312264e-02  2.80799854e-01  -1.15111025e-01 -2.06724425e-02  3.31745945e-01  6.46314621e-02   2.66163738e-01 -8.35052626e-03  3.08981744e-01 -1.08907057e-01   2.55271554e-01 -1.42202067e-01  3.26496190e-02 -5.66176245e-03   8.46876706e-02  7.30229867e-02 -1.77396589e-01  3.96084062e-01   4.75958354e-01  4.36808523e-01  1.77287338e-01 -1.87414850e-02  -3.04376951e-04 -1.92292155e-01  2.05875192e-01 -1.89229119e-01   3.49573134e-01  2.76154555e-01  2.98171648e-01 -8.99345192e-03  -4.88887326e-02  8.09438432e-02 -3.54687748e-02  4.03213372e-01   3.73098345e-01  3.29570738e-01 -2.91310613e-01  4.23453511e-01   3.56240108e-01 -6.75821949e-02  2.47698826e-01 -2.20487237e-01   1.54048502e-02 -2.72803654e-02 -2.34096804e-01  2.38084885e-01   1.69801985e-01 -1.49907418e-01 -3.08300816e-02  4.08301450e-01  -1.79678717e-01 -2.22883994e-01  8.01372674e-03  2.68851087e-01   3.73597155e-01 -2.90824756e-01  4.28830649e-01 -2.05823528e-01  -8.99798093e-02  4.17882514e-01  2.90737002e-01 -1.24271914e-01  -2.22059631e-01 -1.78902831e-02  3.25330989e-01 -3.34843355e-02   3.32228475e-03  1.41955184e-01  4.33570814e-01  1.70123437e-01  -1.32258089e-02  1.81477579e-01 -3.80154835e-02  4.05098811e-01  -1.40075665e-01 -3.57172954e-02 -1.12168884e-01  5.91169359e-02   1.38992528e-01  3.16506013e-01  7.43251537e-02  2.56446074e-01   9.62742538e-02  3.11959417e-01 -2.13512816e-01 -5.36187118e-02   2.26937281e-01 -7.78443595e-02  3.63589860e-01 -2.77018771e-01  -2.76358940e-02  3.06091738e-02  2.86565264e-01  1.44140930e-01]\",\"[-0.00325195]\"]}";
		
		System.out.println(conf);
		MyPorter mp = new MyPorter(conf);
		double[] input = {45.885f,-82.568f,1.420161240033E12f};
		mp.predict(input);
	}
	
	public MyPorter() {
		
	}
	
	public MyPorter(String layers_string) {
		
		JSONObject obj = new JSONObject(layers_string);
		
		int totalLayers = obj.getInt("total_layers");
		
		
		JSONArray stds = obj.getJSONArray("stds");
		
		for (int i = 0; i < stds.length(); i++)
		{
			//layer_shapes.get(0)
		    double std = stds.getDouble(i);
		    sigmas[i] = std;
		}
		
		JSONArray meansj = obj.getJSONArray("means");
		
		for (int i = 0; i < meansj.length(); i++)
		{
			//layer_shapes.get(0)
		    double mean = meansj.getDouble(i);
		    means[i] = mean;
		}
		
		JSONArray layer_shapes = obj.getJSONArray("layer_shapes");
		
		String[] layers_conf = new String[totalLayers];
		
		for (int i = 0; i < layer_shapes.length(); i++)
		{
			//layer_shapes.get(0)
		    String layr = layer_shapes.get(i).toString();
		    layr = layr.substring(1, layr.length() - 1);
		    layers_conf[i] = layr;
		}
		
		JSONArray bias_shapes = obj.getJSONArray("bias_shapes");
		
		int[] bias_conf = new int[totalLayers];
		
		for (int i = 0; i < bias_shapes.length(); i++)
		{
			//layer_shapes.get(0)
		    int layr = bias_shapes.getInt(i);
		    bias_conf[i] = layr;
		}
		
		List<double[][]> weight_matrices = new ArrayList<double[][]>();
		
		JSONArray layers = obj.getJSONArray("indv_layers");
		
		for (int i = 0; i < layers.length(); i++)
		{
			//layer_shapes.get(0)
		    String each_layer = layers.get(i).toString();
		    
		    String[] tokens = layers_conf[i].split(",");
		    int row = Integer.valueOf(tokens[0].trim());
		    int col = Integer.valueOf(tokens[1].trim());
		    
		    double[][] this_layer = new double[row][col];
		    
		    each_layer = each_layer.replace("]]", "");
		    each_layer = each_layer.replace("[[", "");
		    each_layer = each_layer.replace("[", "");
		    each_layer = each_layer.trim();
		    String[] lines = each_layer.split("]");
		    
		    for(int j = 0; j < row; j++) {
		    	String[] units = lines[j].trim().split("\\s+");
		    	for(int k = 0 ; k < col; k++) {
		    		this_layer[j][k] = Double.valueOf(units[k]);
		    		
		    	}
		    }
		    
		    
		    weight_matrices.add(this_layer);
		}
		
		this.weight_matrices = weight_matrices;
		List<double[]> bias_matrices = new ArrayList<double[]>();
		
		JSONArray bias_layers = obj.getJSONArray("bias_layers");
		
		for (int i = 0; i < bias_layers.length(); i++)
		{
			//layer_shapes.get(0)
		    String each_layer = bias_layers.get(i).toString();
		   
		    int col = bias_conf[i];
		    
		    double[] this_layer = new double[col];
		    
		    each_layer = each_layer.replace("[", "");
		    each_layer = each_layer.replace("]", "");
		    each_layer = each_layer.trim();
		    String[] lines = each_layer.split("\\s+");
		    
		    for(int j = 0; j < col; j++) {
		    	//System.out.println("RIKI "+lines[j].trim());
		    	this_layer[j] = Double.valueOf(lines[j].trim());
		    		
		    }
		    
			bias_matrices.add(this_layer);
		}
		this.bias_matrices = bias_matrices;
		
		
	}
	
	public double predict(double[] input) {
		
		input[0] = (input[0] - means[0]) / sigmas[0];
		input[1] = (input[1] - means[1]) / sigmas[1];
		input[2] = (input[2] - means[2]) / sigmas[2];
		
		double[][] new_input = new double[1][input.length];
		
		new_input[0] = input;
		
		int count = 0;
		for(double[][] layer: weight_matrices) {
			
			new_input = mat_mult(new_input, layer);
			double[] bias = bias_matrices.get(count);
			for(int i=0; i < bias.length; i++) {
				new_input[0][i]+=bias[i];
			}
			
			for (int i = 0; i < new_input[0].length; i++) {
				new_input[0][i] = java.lang.Math.max(0, new_input[0][i]);
            }
			
			count++;
			
		}
		System.out.println(new_input[0][0]);
		return new_input[0][0];
		
	}
	
	
	public double[][] mat_mult(double[][] A, double[][] B) {

        int aRows = A.length;
        int aColumns = A[0].length;
        int bRows = B.length;
        int bColumns = B[0].length;

        if (aColumns != bRows) {
            throw new IllegalArgumentException("A:Rows: " + aColumns + " did not match B:Columns " + bRows + ".");
        }

        double[][] C = new double[aRows][bColumns];
        for (int i = 0; i < aRows; i++) {
            for (int j = 0; j < bColumns; j++) {
                C[i][j] = 0.00000;
            }
        }

        for (int i = 0; i < aRows; i++) { // aRow
            for (int j = 0; j < bColumns; j++) { // bColumn
                for (int k = 0; k < aColumns; k++) { // aColumn
                    C[i][j] += A[i][k] * B[k][j];
                }
            }
        }

        return C;
    }
	
	

}
